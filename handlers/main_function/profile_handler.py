import random

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Optional
from utils.database import Database
from dotenv import load_dotenv

load_dotenv()

router = Router()
db = Database()

class ProfileStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_name = State()
    waiting_for_work_time = State()
    waiting_for_work_days = State()

@router.message(F.text.in_(["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "/profile"]))
async def show_profile(message: Message, telegram_id: Optional[int] = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if telegram_id is None:
        user = db.get_user(telegram_id=str(message.from_user.id))
    else:
        user = db.get_user(telegram_id=str(telegram_id))
    
    if user is None:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ë–î
    user_id, telegram_id, username, phone, is_seller, full_name, work_time_start, work_time_end, work_days = user
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∂–∞–ª–æ–± —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ get_complaints
    received_complaints = db.get_complaints(accused_telegram_id=telegram_id)
    sent_complaints = db.get_complaints(creator_telegram_id=telegram_id)
    
    complaints_stats = {
        'received_total': len(received_complaints),
        'sent_total': len(sent_complaints),
        'received_pending': len([c for c in received_complaints if c['status'] == 'pending'])
    }
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–≤–µ—Ü, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏
    active_services_count = 0
    if is_seller:
        services = db.get_services(telegram_id=telegram_id, status='active')
        active_services_count = len(services) if services else 0
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
    days_map = {
        '1': '–ü–Ω', '2': '–í—Ç', '3': '–°—Ä', '4': '–ß—Ç',
        '5': '–ü—Ç', '6': '–°–±', '7': '–í—Å'
    }
    work_days_formatted = ', '.join(days_map[d] for d in work_days.split(',')) if work_days else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    profile_text += f"üÜî ID: {user_id}\n"
    profile_text += f"üÜî Telegram ID: {telegram_id}\n"
    profile_text += f"üë§ Username: @{username}\n"
    profile_text += f"üë®‚Äçüíº –ò–º—è: {full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    profile_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    profile_text += f"üìä –°—Ç–∞—Ç—É—Å: {'–ü—Ä–æ–¥–∞–≤–µ—Ü' if is_seller else '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å'}\n"
    
    if is_seller:
        profile_text += f"\n‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time_start} - {work_time_end}\n"
        profile_text += f"üìÖ –†–∞–±–æ—á–∏–µ –¥–Ω–∏: {work_days_formatted}\n"
        profile_text += f"üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥: {active_services_count}\n"
    
    profile_text += f"\nüìù –ñ–∞–ª–æ–± –ø–æ–ª—É—á–µ–Ω–æ: {complaints_stats['received_total']}\n"
    profile_text += f"üìù –ñ–∞–ª–æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {complaints_stats['sent_total']}\n"
    profile_text += f"üìù –ñ–∞–ª–æ–± –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {complaints_stats['received_pending']}\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø—Ä–æ—Ñ–∏–ª—è
    keyboard = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π
    if not phone:
        keyboard.button(text="üì± –£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="add_phone")
    else:
        keyboard.button(text="üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="change_phone")
        
    if not full_name:
        keyboard.button(text="üë§ –£–∫–∞–∑–∞—Ç—å –∏–º—è", callback_data="add_name")
    else:
        keyboard.button(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_name")

    if is_seller:
        keyboard.button(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", callback_data="change_work_time")
        keyboard.button(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏", callback_data="change_work_days")
    
    keyboard.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
    
    await message.answer(profile_text, parse_mode="HTML", reply_markup=keyboard.as_markup())

@router.callback_query(F.data.in_(["add_phone", "change_phone"]))
async def request_phone(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")
    
    await state.set_state(ProfileStates.waiting_for_phone)
    await callback.message.edit_text(
        "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:",
        reply_markup=keyboard.as_markup()
    )

@router.message(ProfileStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not (phone.startswith('+7') and len(phone) == 12 and phone[1:].isdigit()):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX"
        )
        return
        
    try:
        user = db.get_user(telegram_id=str(message.from_user.id))
        if not user:
            raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ë–î
        db.update_user(
            user_id=user[0],
            number_phone=phone
        )
        
        await state.clear()
        await message.answer("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
        await show_profile(message, message.from_user.id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        await state.clear()

@router.callback_query(F.data == "change_work_time")
async def work_time_request(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
    keyboard = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    keyboard.row(InlineKeyboardButton(text="üîÑ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", callback_data="work_24h"))
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    hours = ['05', '06', '07', '08', '09', '10', '11', '12']
    row = []
    for hour in hours:
        row.append(InlineKeyboardButton(
            text=f"–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –≤ {hour}:00",
            callback_data=f"start_time_{hour}"
        ))
        if len(row) == 2:  # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            keyboard.row(*row)
            row = []
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.row(*row)
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤–Ω–∏–∑—É
    keyboard.row(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_input"))
    
    await state.set_state(ProfileStates.waiting_for_work_time)
    await callback.message.edit_text(
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data == "work_24h")
async def set_24h_work(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
    try:
        user = db.get_user(telegram_id=str(callback.from_user.id))
        if not user:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ –ë–î –Ω–∞ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        db.update_user(
            user_id=user[0],
            work_time_start="00:00",
            work_time_end="23:59"
        )
        
        await state.clear()
        await callback.message.edit_text("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        await show_profile(callback.message, callback.from_user.id)
        
    except ValueError as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã")
        await state.clear()

@router.callback_query(lambda c: c.data.startswith("start_time_"))
async def process_start_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"""
    try:
        start_time = callback.data.split('_')[2]
        await state.update_data(start_time=start_time)
        
        keyboard = InlineKeyboardBuilder()
        hours = ['16', '17', '18', '19', '20', '21', '22', '23', '00', '01', '02', '03', '04']
        row = []
        for hour in hours:
            row.append(InlineKeyboardButton(
                text=f"–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤ {hour}:00",
                callback_data=f"end_time_{hour}"
            ))
            if len(row) == 2:  # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                keyboard.row(*row)
                row = []
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            keyboard.row(*row)
            
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤–Ω–∏–∑—É
        keyboard.row(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_input"))
        
        await callback.message.edit_text(
            f"‚è∞ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã: {start_time}:00\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã:",
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏")
        await state.clear()

@router.callback_query(lambda c: c.data.startswith("end_time_"))
async def process_end_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    try:
        end_time = callback.data.split('_')[2]
        data = await state.get_data()
        start_time = data.get('start_time')
        
        if not start_time:
            raise ValueError("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
            
        user = db.get_user(telegram_id=str(callback.from_user.id))
        if not user:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ –ë–î
        db.update_user(
            user_id=user[0],
            work_time_start=f"{start_time}:00",
            work_time_end=f"{end_time}:00"
        )
        
        await state.clear()
        await callback.message.edit_text(
            f"‚úÖ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
            f"‚è∞ {start_time}:00 - {end_time}:00"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
        await show_profile(callback.message, callback.from_user.id)
        
    except ValueError as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã")
        await state.clear()

@router.callback_query(F.data == "change_work_days")
async def work_days_request(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"""
    user = db.get_user(telegram_id=str(callback.from_user.id))
    current_days = set(user[8].split(',')) if user[8] else set()
    
    keyboard = InlineKeyboardBuilder()
    days = {
        '1': '–ü–Ω', '2': '–í—Ç', '3': '–°—Ä', '4': '–ß—Ç',
        '5': '–ü—Ç', '6': '–°–±', '7': '–í—Å'
    }
    
    for day_num, day_name in days.items():
        status = '‚úÖ' if day_num in current_days else '‚¨úÔ∏è'
        keyboard.button(
            text=f"{status} {day_name}",
            callback_data=f"toggle_day_{day_num}"
        )
    
    keyboard.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="save_work_days")
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")
    
    keyboard.adjust(4, 3, 2)  # 4 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 3 –≤–æ –≤—Ç–æ—Ä–æ–º, 2 –≤ —Ç—Ä–µ—Ç—å–µ–º
    
    await state.set_state(ProfileStates.waiting_for_work_days)
    await state.update_data(selected_days=list(current_days))
    
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏:\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–µ–Ω—å –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(lambda c: c.data.startswith("toggle_day_"))
async def toggle_work_day(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"""
    day = callback.data.split('_')[2]
    data = await state.get_data()
    selected_days = set(data.get('selected_days', []))
    
    if day in selected_days:
        selected_days.remove(day)
    else:
        selected_days.add(day)
    
    await state.update_data(selected_days=list(selected_days))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardBuilder()
    days = {
        '1': '–ü–Ω', '2': '–í—Ç', '3': '–°—Ä', '4': '–ß—Ç',
        '5': '–ü—Ç', '6': '–°–±', '7': '–í—Å'
    }
    
    for day_num, day_name in days.items():
        status = '‚úÖ' if day_num in selected_days else '‚¨úÔ∏è'
        keyboard.button(
            text=f"{status} {day_name}",
            callback_data=f"toggle_day_{day_num}"
        )
    
    keyboard.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="save_work_days")
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")
    
    keyboard.adjust(4, 3, 2)
    
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏:\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–µ–Ω—å –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data == "save_work_days")
async def save_work_days(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"""
    try:
        data = await state.get_data()
        selected_days = data.get('selected_days', [])
        
        if not selected_days:
            await callback.message.edit_text(
                "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å"
            )
            return
            
        user = db.get_user(telegram_id=str(callback.from_user.id))
        if not user:
            raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        work_days = ','.join(sorted(selected_days))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –≤ –ë–î
        db.update_user(
            user_id=user[0],
            work_days=work_days
        )
        
        await state.clear()
        await callback.message.edit_text("‚úÖ –†–∞–±–æ—á–∏–µ –¥–Ω–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
        await show_profile(callback.message, callback.from_user.id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π")
        await state.clear()

@router.callback_query(F.data.in_(["add_name", "change_name"]))
async def request_name(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")
    
    await state.set_state(ProfileStates.waiting_for_name)
    await callback.message.edit_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
        reply_markup=keyboard.as_markup()
    )

@router.message(ProfileStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    if len(name) < 2 or len(name) > 50:
        await message.answer(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤"
        )
        return
        
    try:
        user = db.get_user(telegram_id=str(message.from_user.id))
        if not user:
            raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –ë–î
        db.update_user(
            user_id=user[0],
            full_name=name
        )
        
        await state.clear()
        await message.answer("‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
        await show_profile(message, message.from_user.id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏")
        await state.clear()

@router.callback_query(F.data == "cancel_input")
async def cancel_input(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await show_profile(callback.message, callback.from_user.id)
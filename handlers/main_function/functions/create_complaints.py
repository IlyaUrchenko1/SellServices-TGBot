from datetime import datetime
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from utils.database import Database
from handlers.main_handler import show_main_menu
from typing import Optional, Dict, Tuple

router = Router(name='create_complaints')
db = Database()

class ComplaintStates(StatesGroup):
    waiting_for_complaint_type = State()
    waiting_for_text = State()

def parse_complaint_data(callback_data: str) -> Tuple[Optional[str], Optional[str], Optional[int]]:
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    Returns:
        Tuple[complaint_type, accused_telegram_id, accused_service_id]
    """
    try:
        parts = callback_data.split("_")
        if len(parts) < 4:
            return None, None, None
            
        complaint_type = parts[2]  # user –∏–ª–∏ service
        accused_telegram_id = parts[3]
        accused_service_id = int(parts[4]) if len(parts) > 4 else None
        
        return complaint_type, accused_telegram_id, accused_service_id
    except Exception:
        return None, None, None

def validate_complaint_data(
    complaint_type: str,
    creator_telegram_id: str,
    accused_telegram_id: Optional[str] = None,
    accused_service_id: Optional[int] = None
) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∂–∞–ª–æ–±—ã
    Returns:
        Tuple[is_valid: bool, error_message: str]
    """
    if complaint_type not in ['user', 'service']:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∂–∞–ª–æ–±—ã"
        
    if complaint_type == 'user':
        if not accused_telegram_id:
            return False, "–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            
        if creator_telegram_id == accused_telegram_id:
            return False, "–ù–µ–ª—å–∑—è –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è"
            
        if not db.get_user(telegram_id=accused_telegram_id):
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        ban_info = db.get_ban_info('user', accused_telegram_id=accused_telegram_id)
        if ban_info:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            
    elif complaint_type == 'service':
        if not accused_service_id:
            return False, "–ù–µ —É–∫–∞–∑–∞–Ω ID —É—Å–ª—É–≥–∏"
            
        service = db.get_services(service_id=accused_service_id)
        if not service:
            return False, "–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω–∞ –ª–∏ —É—Å–ª—É–≥–∞
        ban_info = db.get_ban_info('service', accused_service_id=accused_service_id)
        if ban_info:
            return False, "–£—Å–ª—É–≥–∞ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
            
    return True, ""

@router.callback_query(F.data.startswith("create_complaint_"))
async def create_complaint(callback: CallbackQuery, state: FSMContext) -> None:
    try:
        complaint_type, accused_telegram_id, accused_service_id = parse_complaint_data(callback.data)
        if not complaint_type:
            await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∂–∞–ª–æ–±—ã")
            await callback.answer()
            return

        creator_telegram_id = str(callback.from_user.id)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        is_valid, error_msg = validate_complaint_data(
            complaint_type, 
            creator_telegram_id,
            accused_telegram_id,
            accused_service_id
        )
        
        if not is_valid:
            await callback.message.answer(error_msg)
            await callback.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            complaint_type=complaint_type,
            creator_telegram_id=creator_telegram_id,
            accused_telegram_id=accused_telegram_id,
            accused_service_id=accused_service_id
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚õîÔ∏è –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–≤–æ–Ω–∫–∏", callback_data="no_answer_complaint")],
            [InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –ø—Ä–∏—á–∏–Ω—É", callback_data="custom_complaint")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_complaint")]
        ])
        
        await state.set_state(ComplaintStates.waiting_for_complaint_type)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:",
            reply_markup=keyboard
        )
        await callback.answer()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–∞–ª–æ–±—ã: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        await state.clear()
        await callback.answer()

@router.callback_query(ComplaintStates.waiting_for_complaint_type)
async def process_complaint_type(callback: CallbackQuery, state: FSMContext) -> None:
    if callback.data == "no_answer_complaint":
        data = await state.get_data()
        service_id = data.get('accused_service_id')
        
        # –ë–∞–Ω–∏–º —É—Å–ª—É–≥—É –Ω–∞ 2 —á–∞—Å–∞
        db.ban_entity(
            admin_telegram_id="SYSTEM",
            type='service',
            accused_service_id=service_id,
            ban_duration_hours=2,
            is_permanent=False,
            reason="–ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–≤–æ–Ω–∫–∏"
        )
        
        db.update_service_status(service_id, 'blocked')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —É—Å–ª—É–≥–∏
        service = db.get_service_by_id(service_id)
        if service:
            await callback.bot.send_message(
                service['owner_telegram_id'],
                "üö´ –í–∞—à–∞ —É—Å–ª—É–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 2 —á–∞—Å–∞.\n–ü—Ä–∏—á–∏–Ω–∞: –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–≤–æ–Ω–∫–∏"
            )
        
        await callback.message.answer("‚úÖ –ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞. –£—Å–ª—É–≥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 2 —á–∞—Å–∞")
        await state.clear()
        
    elif callback.data == "custom_complaint":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_complaint")]
        ])
        
        await state.set_state(ComplaintStates.waiting_for_text)
        await callback.message.answer(
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã.\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –¥–µ—Ç–∞–ª–∏ —Å–∏—Ç—É–∞—Ü–∏–∏.",
            reply_markup=keyboard
        )
        
    await callback.answer()

@router.message(ComplaintStates.waiting_for_text)
async def process_complaint_text(message: Message, state: FSMContext) -> None:
    try:
        complaint_text = message.text.strip()
        if len(complaint_text) < 10:
            await message.answer(
                "–¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_complaint")]
                ])
            )
            return
            
        data = await state.get_data()
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∂–∞–ª–æ–±—ã
        is_valid, error_msg = validate_complaint_data(
            data['complaint_type'],
            data['creator_telegram_id'],
            data.get('accused_telegram_id'),
            data.get('accused_service_id')
        )
        
        if not is_valid:
            await message.answer(error_msg)
            await state.clear()
            return
        
        success = db.add_complaint(
            type=data['complaint_type'],
            creator_telegram_id=data['creator_telegram_id'],
            text=complaint_text,
            accused_telegram_id=data.get('accused_telegram_id'),
            accused_service_id=data.get('accused_service_id')
        )
        
        await message.answer(
            "‚úÖ –ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏" if success
            else "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user = db.get_user(telegram_id=str(message.from_user.id))
        if user:
            await show_main_menu(message, user)
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        await state.clear()

@router.callback_query(F.data == "cancel_complaint")
async def cancel_complaint(callback: CallbackQuery, state: FSMContext) -> None:
    if await state.get_state():
        await state.clear()
        await callback.message.answer("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.answer()

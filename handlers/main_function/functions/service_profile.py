from aiogram import Router, F, types
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, Message, InputMediaPhoto
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.database import Database
from urllib.parse import quote
import json
from typing import List, Tuple, Dict, Any, Optional
from handlers.main_function.post_handler import to_home_keyboard


router = Router(name='service_profile')
db = Database()
ITEMS_PER_PAGE = 5

class EditServiceStates(StatesGroup):
    waiting_for_photo = State()
    confirm_delete = State()

def create_webapp_form_for_edit(service: dict) -> Optional[ReplyKeyboardMarkup]:
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä–º—É –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏"""
    try:
        service_type = db.get_service_type(service["service_type_id"])
        if not service_type or "required_fields" not in service_type:
            return None
            
        fields = {}
        
        for name, data in service_type["required_fields"].items():
            if name != "photo" and isinstance(data, dict):
                current_value = ""
                if name == "adress":
                    address_parts = []
                    if service.get("city"):
                        address_parts.append(f"–≥ {service['city']}")
                    if service.get("street"): 
                        address_parts.append(f"—É–ª {service['street']}")
                    if service.get("house"):
                        address_parts.append(f"–¥ {service['house']}")
                    current_value = ", ".join(address_parts)
                elif name in service:
                    current_value = service[name]
                elif name in service.get("custom_fields", {}):
                    current_value = service["custom_fields"][name]

                fields[name] = current_value

        field_params = []
        for name, value in fields.items():
            encoded_name = quote(str(name))
            encoded_value = quote(str(value))
            param = f"{encoded_name}={encoded_value}"
            field_params.append(param)

        base_url = "https://spontaneous-kashata-919d92.netlify.app/update"
        full_url = f"{base_url}?{('&').join(field_params)}"
        
        keyboard = ReplyKeyboardBuilder()
        keyboard.row(
            KeyboardButton(
                text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                web_app=WebAppInfo(url=full_url)
            )
        )
        keyboard.row(
            KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞"),
            KeyboardButton(text="üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ")
        )
        
        return keyboard.as_markup(resize_keyboard=True)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return None

@router.callback_query(F.data.startswith("edit_service_"))
async def start_edit_service(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏"""
    try:
        service_id, page = map(int, callback.data.split("_")[2:])
        service = db.get_services(service_id=service_id)
        
        if not service:
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        await state.update_data(edit_service_id=service_id, page=page, last_message_id=callback.message.message_id)
        
        keyboard = create_webapp_form_for_edit(service)
        if keyboard:
            await callback.message.answer(
                "üñ• –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
                "‚Ä¢ ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª - –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏\n"
                "‚Ä¢ ¬´–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ¬ª - –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
                "‚Ä¢ ¬´–û—Ç–º–µ–Ω–∞¬ª - –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                reply_markup=keyboard
            )
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã")
            
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        await callback.answer()

@router.message(lambda message: message.web_app_data and message.web_app_data.button_text == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def process_edit_webapp_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏"""
    try:
        data = json.loads(message.web_app_data.data)
        state_data = await state.get_data()
        service_id = state_data.get('edit_service_id')
        last_message_id = state_data.get('last_message_id')
        
        if not service_id:
            raise ValueError("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        service = db.get_services(service_id=service_id)
        if not service:
            raise ValueError("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        service_type = db.get_service_type(service["service_type_id"])
        if not service_type:
            raise ValueError("–¢–∏–ø —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –ø–æ–ª—è
        update_data = {}
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        base_fields = ['title', 'district', 'number_phone', 'price']
        for field in base_fields:
            if data.get(field) is not None and data[field] != '':
                update_data[field] = data[field]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞
        if data.get('adress'):
            address_parts = data['adress'].split(',')
            if len(address_parts) >= 1:
                update_data['city'] = address_parts[0].replace('–≥ ', '').strip()
            if len(address_parts) >= 2:
                update_data['street'] = address_parts[1].replace('—É–ª ', '').strip()
            if len(address_parts) >= 3:
                update_data['house'] = address_parts[2].replace('–¥ ', '').strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ custom fields
        custom_fields = {}
        for key, value in data.items():
            if (key not in base_fields + ['adress', 'service_type_id'] and 
                value is not None and value != ''):
                custom_fields[key] = value

        if custom_fields:
            update_data['custom_fields'] = {
                **service.get('custom_fields', {}),
                **custom_fields
            }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(form_data=update_data)
        
        keyboard = ReplyKeyboardBuilder()
        keyboard.row(
            KeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ"),
            KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")
        )
        
        await message.answer(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —É—Å–ª—É–≥–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ",
            reply_markup=keyboard.as_markup(resize_keyboard=True)
        )
        
        await state.set_state(EditServiceStates.waiting_for_photo)
        
    except json.JSONDecodeError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã")
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã: {e}")

@router.message(EditServiceStates.waiting_for_photo)
async def process_edit_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    try:
        data = await state.get_data()
        form_data = data.get('form_data', {})
        service_id = data.get('edit_service_id')
        page = data.get('page', 0)

        if not service_id:
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ")

        service = db.get_services(service_id=service_id)
        if not service:
            raise ValueError("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if message.photo:
            form_data["photo_id"] = message.photo[-1].file_id
        elif message.text != "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ":
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª")
            return
    
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª—É–≥—É
        if db.update_service(service_id, **form_data):
            updated_service = db.get_services(service_id=service_id)
            caption = await format_service_info(updated_service)
            keyboard = await get_service_keyboard(service_id, updated_service['status'], page)
            
            if updated_service.get('photo_id'):
                photo_ids = updated_service['photo_id'].split(',')
                if len(photo_ids) == 1:
                    await message.answer_photo(
                        photo=photo_ids[0],
                        caption=caption,
                        reply_markup=keyboard
                    )
                else:
                    media = [InputMediaPhoto(media=photo_ids[0], caption=caption)]
                    media.extend([InputMediaPhoto(media=photo_id) for photo_id in photo_ids[1:]])
                    await message.answer_media_group(media=media)
                    await message.answer(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–æ–π:", reply_markup=keyboard)
            else:
                await message.answer(caption, reply_markup=keyboard)
                        
            await message.answer("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=to_home_keyboard())
        else:
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏")

        await state.clear()

    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

async def format_service_info(service: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ"""
    try:
        address_parts = []
        for field, prefix in {
            'city': '–≥. ',
            'district': '',
            'street': '—É–ª. ',
            'house': '–¥. '
        }.items():
            if service.get(field):
                address_parts.append(f"{prefix}{service[field]}")
        
        address_str = ", ".join(filter(None, address_parts))

        try:
            price = "{:,}".format(int(float(service.get('price', 0)))).replace(',', ' ')
        except (ValueError, TypeError):
            price = "0"

        status_emoji = "üü¢" if service.get('status') == 'active' else "üî¥"
        
        caption = (
            f"{status_emoji} {service.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üìç {address_str}\n"
            f"üì± {service.get('number_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üí∞ {price}‚ÇΩ\n"
            f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {service.get('views', 0)}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {service.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        )

        service_type = db.get_service_type(service['service_type_id'])
        if not service_type:
            print(f"–¢–∏–ø —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {service['service_type_id']}")
            return caption

        custom_fields = service.get('custom_fields', {})
        required_fields = service_type.get('required_fields', {})
        
        if isinstance(custom_fields, dict) and isinstance(required_fields, dict):
            for field, value in custom_fields.items():
                if field in required_fields and value:
                    field_label = required_fields[field].get('label', field)
                    caption += f"üìå {field_label}: {value}\n"

        return caption

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏: {e}")
        return "–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"

async def get_service_keyboard(service_id: int, status: str, page: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–æ–π"""
    kb = InlineKeyboardBuilder()
    
    status_text = "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å" if status == 'active' else "üü¢ –í–∫–ª—é—á–∏—Ç—å"
    status_data = f"toggle_service_{service_id}_{page}"
    
    buttons = [
        (status_text, status_data),
        ("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", f"edit_service_{service_id}_{page}"),
        ("üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", f"change_photo_{service_id}_{page}"),
        ("‚ùå –£–¥–∞–ª–∏—Ç—å", f"delete_service_{service_id}_{page}")
    ]
    
    for text, callback_data in buttons:
        kb.row(InlineKeyboardButton(text=text, callback_data=callback_data))

    return kb.as_markup()

async def get_navigation_keyboard(page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    kb = InlineKeyboardBuilder()
    
    buttons = []
    if page > 0:
        buttons.append(("‚¨ÖÔ∏è", f"services_page_{page-1}"))
    
    buttons.append((f"üìÑ {page+1}/{total_pages}", "ignore"))
    
    if page < total_pages - 1:
        buttons.append(("‚û°Ô∏è", f"services_page_{page+1}"))
        
    kb.row(*[InlineKeyboardButton(text=text, callback_data=data) for text, data in buttons])
    
    return kb.as_markup()

@router.message(F.text.in_(["üìã –í—Å–µ –º–æ–∏ —É—Å–ª—É–≥–∏", "my_services"]))
async def show_services(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = db.get_user(telegram_id=str(message.from_user.id))
        if not user or not user[4]:  # user[4] - –ø–æ–ª–µ is_seller
            await message.answer(
                "‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ª—É–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º",
                reply_markup=to_home_keyboard()
            )
            return

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –≤–º–µ—Å—Ç–æ user_id
        services = db.get_services(telegram_id=str(message.from_user.id))
        
        if not services:
            await message.answer(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥\n"
                "–í–≤–µ–¥–∏—Ç–µ /add_service —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É"
            )
            return

        if isinstance(services, dict):
            services = [services]

        total_pages = (len(services) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
        
        for service in services[:ITEMS_PER_PAGE]:
            caption = await format_service_info(service)
            keyboard = await get_service_keyboard(service['id'], service['status'], 0)
            
            if service.get('photo_id'):
                photo_ids = service['photo_id'].split(',')
                if len(photo_ids) == 1:
                    await message.answer_photo(
                        photo=photo_ids[0],
                        caption=caption,
                        reply_markup=keyboard
                    )
                else:
                    media = [InputMediaPhoto(media=photo_ids[0], caption=caption)]
                    media.extend([InputMediaPhoto(media=photo_id) for photo_id in photo_ids[1:]])
                    await message.answer_media_group(media=media)
                    await message.answer(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–æ–π:", reply_markup=keyboard)
            else:
                await message.answer(caption, reply_markup=keyboard)

        if total_pages > 1:
            nav_markup = await get_navigation_keyboard(0, total_pages)
            await message.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è:", reply_markup=nav_markup)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —É—Å–ª—É–≥: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥")

@router.callback_query(F.data.startswith("services_page_"))
async def handle_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    try:
        page = int(callback.data.split("_")[2])
        user = db.get_user(telegram_id=str(callback.from_user.id))
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        services = db.get_services(user_id=user[0])
        
        if not services:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —É—Å–ª—É–≥")
            return
        
        if isinstance(services, dict):
            services = [services]
            
        total_pages = (len(services) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
        start_idx = page * ITEMS_PER_PAGE
        end_idx = start_idx + ITEMS_PER_PAGE
        
        for service in services[start_idx:end_idx]:
            caption = await format_service_info(service)
            keyboard = await get_service_keyboard(service['id'], service['status'], page)
            
            if service.get('photo_id'):
                photo_ids = service['photo_id'].split(',')
                if len(photo_ids) == 1:
                    await callback.message.answer_photo(
                        photo=photo_ids[0],
                        caption=caption,
                        reply_markup=keyboard
                    )
                else:
                    media = [InputMediaPhoto(media=photo_ids[0], caption=caption)]
                    media.extend([InputMediaPhoto(media=photo_id) for photo_id in photo_ids[1:]])
                    await callback.message.answer_media_group(media=media)
                    await callback.message.answer(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–æ–π:", reply_markup=keyboard)
            else:
                await callback.message.answer(caption, reply_markup=keyboard)

        if total_pages > 1:
            nav_markup = await get_navigation_keyboard(page, total_pages)
            await callback.message.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è:", reply_markup=nav_markup)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

@router.callback_query(F.data.startswith("toggle_service_"))
async def toggle_service_status(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å–ª—É–≥–∏"""
    try:
        service_id, page = map(int, callback.data.split("_")[2:])
        service = db.get_services(service_id=service_id)
        
        if not service:
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        new_status = 'deactive' if service.get('status') == 'active' else 'active'
        if db.update_service(service_id, status=new_status):
            status_text = "–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ" if new_status == 'active' else "–æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚≠ï"
            await callback.answer(f"–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ {status_text}")
            
            updated_service = db.get_services(service_id=service_id)
            if not updated_service:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                return
                
            caption = await format_service_info(updated_service)
            keyboard = await get_service_keyboard(service_id, new_status, page)
            
            if updated_service.get('photo_id'):
                photo_ids = updated_service['photo_id'].split(',')
                if len(photo_ids) == 1:
                    await callback.message.answer_photo(
                        photo=photo_ids[0],
                        caption=caption,
                        reply_markup=keyboard
                    )
                else:
                    media = [InputMediaPhoto(media=photo_ids[0], caption=caption)]
                    media.extend([InputMediaPhoto(media=photo_id) for photo_id in photo_ids[1:]])
                    await callback.message.answer_media_group(media=media)
                    await callback.message.answer(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–æ–π:", reply_markup=keyboard)
            else:
                await callback.message.answer(caption, reply_markup=keyboard)
                
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("delete_service_"))
async def delete_service(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏"""
    try:
        service_id = int(callback.data.split("_")[2])
        
        kb = InlineKeyboardBuilder()
        kb.row(
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{service_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_{service_id}")
        )
        
        await callback.message.answer(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —É—Å–ª—É–≥—É?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=kb.as_markup()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_service(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
    try:
        service_id = int(callback.data.split("_")[2])
        if db.delete_service(service_id, hard_delete=True):
            await callback.answer("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            await callback.message.answer("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            await show_services(callback.message)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("cancel_delete_"))
async def cancel_delete_service(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
    try:
        service_id = int(callback.data.split("_")[2])
        service = db.get_services(service_id=service_id)
        
        if service:
            caption = await format_service_info(service)
            keyboard = await get_service_keyboard(service_id, service['status'], 0)
            
            if service.get('photo_id'):
                photo_ids = service['photo_id'].split(',')
                if len(photo_ids) == 1:
                    await callback.message.answer_photo(
                        photo=photo_ids[0],
                        caption=caption,
                        reply_markup=keyboard
                    )
                else:
                    media = [InputMediaPhoto(media=photo_ids[0], caption=caption)]
                    media.extend([InputMediaPhoto(media=photo_id) for photo_id in photo_ids[1:]])
                    await callback.message.answer_media_group(media=media)
                    await callback.message.answer(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–æ–π:", reply_markup=keyboard)
            else:
                await callback.message.answer(caption, reply_markup=keyboard)
            
        await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def validate_form_data(data: Dict[str, Any], required_fields: Dict[str, Dict[str, Any]]) -> Optional[str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª—è–º
    Returns:
        None –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∏–ª–∏ —Å—Ç—Ä–æ–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏
    """
    for field_name, field_info in required_fields.items():
        if field_info.get('required') and field_name != 'photo':
            if field_name not in data or not data[field_name]:
                return f"–ü–æ–ª–µ '{field_info.get('label', field_name)}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
    return None


@router.callback_query(F.data.startswith("view_service_"))
async def view_service(callback: CallbackQuery):
    await callback.answer()
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —É—Å–ª—É–≥–∏"""
    try:
        service_id = int(callback.data.split("_")[2])
        service = db.get_services(service_id=service_id)
        
        if not service:
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        caption = await format_service_info(service)
        keyboard = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∂–∞–ª–æ–±–∞–º
        keyboard.row(InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∂–∞–ª–æ–±–∞–º",
            callback_data="get_all_reports"
        ))
        
        if service.get('photo_id'):
            photo_ids = service['photo_id'].split(',')
            if len(photo_ids) == 1:
                await callback.message.edit_media(
                    media=InputMediaPhoto(media=photo_ids[0], caption=caption),
                    reply_markup=keyboard.as_markup()
                )
            else:
                media = [InputMediaPhoto(media=photo_ids[0], caption=caption)]
                media.extend([InputMediaPhoto(media=photo_id) for photo_id in photo_ids[1:]])
                await callback.message.edit_media(
                    media=media,
                    reply_markup=keyboard.as_markup()
                )
        else:
            await callback.message.edit_text(
                caption,
                reply_markup=keyboard.as_markup()
            )
            
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        db.update_service(service_id, views=service.get('views', 0) + 1)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —É—Å–ª—É–≥–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —É—Å–ª—É–≥–∏")

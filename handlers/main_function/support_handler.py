from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards.main_keyboards import to_home_keyboard, back_keyboard

router = Router(name='support_handler')

class SupportState(StatesGroup):
    waiting_for_question = State()
    waiting_for_answer_for_user = State()

@router.message(F.text == "üë®‚Äçü¶∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_command(message: Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è", callback_data='ask_a_issue'))
    keyboard.row(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_to_home"))
    
    await message.answer(
        """
        üßë‚Äçüíª –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

        **–°—é–¥–∞ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –ø–æ –≤–∞—à–µ–º—É –∂–µ–ª–∞–Ω–∏—é**
        """,
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(
        "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data == "ask_a_issue")
async def ask_to_helper(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_to_home"))
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(SupportState.waiting_for_question)
    await callback.answer()

@router.message(SupportState.waiting_for_question)
async def process_question(message: Message, state: FSMContext):
    group_chat_id = -1002464551959  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    
    if message.photo:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–ª—å–∑—è –ø–æ–∫–∞-—á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
            reply_markup=back_keyboard()
        )
        return

    issue_text = message.text if message.text else "None"
    
    try:
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{message.from_user.id}"))
        
        await message.bot.send_message(
            chat_id=group_chat_id,
            text=f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name} (@{message.from_user.username}):\n\n{issue_text}",
            reply_markup=keyboard.as_markup()
        )
        
        await message.answer(
            "–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=to_home_keyboard()
        )
        await state.clear()
        
    except Exception as e:
        await message.answer(
            "ü§ñ –£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ –µ–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! ‚ù§Ô∏è",
            reply_markup=to_home_keyboard()
        )
        print(f"–û—à–∏–±–∫–∞ –≤ process_question: {e}")

@router.callback_query(F.data.startswith("answer_"))
async def handle_admin_answer_callback(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = callback.data.split("_")[1]
        await state.update_data(id_for_answer=user_id)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back"))
        
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=keyboard.as_markup()
        )
        await state.set_state(SupportState.waiting_for_answer_for_user)
        await callback.answer()
        
    except Exception as e:
        await callback.message.edit_text(
            "ü§ñ –£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ –µ–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! ‚ù§Ô∏è",
            reply_markup=to_home_keyboard()
        )
        print(f"–û—à–∏–±–∫–∞ –≤ handle_admin_answer_callback: {e}")

@router.message(SupportState.waiting_for_answer_for_user)
async def process_answer(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_id = data.get("id_for_answer")

        if not user_id:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.",
                reply_markup=to_home_keyboard()
            )
            return

        await message.bot.send_message(
            chat_id=user_id,
            text=f"–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{message.text}"
        )
        
        await message.answer(
            "‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            reply_markup=to_home_keyboard()
        )
        await state.clear()
        
    except Exception as e:
        await message.answer(
            "ü§ñ –£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=to_home_keyboard()
        )
        print(f"–û—à–∏–±–∫–∞ –≤ process_answer: {e}")

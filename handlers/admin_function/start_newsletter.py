import asyncio

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, FSInputFile
from aiogram.exceptions import TelegramBadRequest

from utils.database import Database
from utils.variables import ADMIN_IDS
from keyboards.role_keyboards import admin_keyboard

router = Router(name='admin')
db = Database()

USERS_PER_PAGE = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

class NewsletterStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_photo = State()
    confirm = State()
    sending = State()

def get_newsletter_keyboard(back=True, admin_menu=True):
    keyboard = InlineKeyboardBuilder()
    if back:
        keyboard.row(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="cancel_newsletter"))
    if admin_menu:
        keyboard.row(InlineKeyboardButton(text="üè† –í –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu"))
    return keyboard

@router.callback_query(F.data == "start_broadcast")
async def start_newsletter(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    keyboard = get_newsletter_keyboard()
    
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        "- *—Ç–µ–∫—Å—Ç* –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ\n"
        "- _—Ç–µ–∫—Å—Ç_ –¥–ª—è –∫—É—Ä—Å–∏–≤–∞\n"
        "- `—Ç–µ–∫—Å—Ç` –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    
    await state.set_state(NewsletterStates.waiting_for_text)
    await callback.answer()

@router.message(NewsletterStates.waiting_for_text)
async def process_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="skip_photo"))
    keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞", callback_data="back_to_text"))
    keyboard.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="cancel_newsletter"))
    keyboard.row(InlineKeyboardButton(text="üè† –í –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu"))
    
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ':\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 1280x720 –ø–∏–∫—Å–µ–ª–µ–π",
        reply_markup=keyboard.as_markup()
    )
    await message.delete()
    await state.set_state(NewsletterStates.waiting_for_photo)

@router.callback_query(F.data == "back_to_text")
async def back_to_text(callback: CallbackQuery, state: FSMContext):
    keyboard = get_newsletter_keyboard()
    
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        "- *—Ç–µ–∫—Å—Ç* –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ\n"
        "- _—Ç–µ–∫—Å—Ç_ –¥–ª—è –∫—É—Ä—Å–∏–≤–∞\n"
        "- `—Ç–µ–∫—Å—Ç` –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    
    await state.set_state(NewsletterStates.waiting_for_text)
    await callback.answer()

@router.message(NewsletterStates.waiting_for_photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("text", "")
    
    await state.update_data(photo=message.photo[-1].file_id)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å", callback_data="confirm_newsletter"))
    keyboard.row(InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_broadcast"))
    keyboard.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_newsletter"))
    keyboard.row(InlineKeyboardButton(text="üè† –í –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu"))
    
    await message.answer_photo(
        photo=message.photo[-1].file_id,
        caption=f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏\n\n{text}",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await message.delete()
    await state.set_state(NewsletterStates.confirm)

@router.callback_query(F.data == "skip_photo")
async def skip_photo(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("text", "")
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å", callback_data="confirm_newsletter"))
    keyboard.row(InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_broadcast"))
    keyboard.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_newsletter"))
    keyboard.row(InlineKeyboardButton(text="üè† –í –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu"))
    
    await callback.message.edit_text(
        f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏\n\n{text}",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(NewsletterStates.confirm)
    await callback.answer()

@router.callback_query(F.data == "confirm_newsletter")
async def confirm_newsletter(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("text", "")
    photo = data.get("photo")
    
    users = db.cursor.execute("SELECT telegram_id FROM users").fetchall()
    total_users = len(users)
    total_pages = (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE
    
    sent_count = 0
    failed_count = 0
    
    status_message = await callback.message.edit_text(
        "üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_users}"
    )

    keyboard = get_newsletter_keyboard(back=False)

    batch_size = 10  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
    for i in range(0, total_users, batch_size):
        batch_users = users[i:i + batch_size]
        
        for user in batch_users:
            try:
                if photo:
                    await callback.bot.send_photo(
                        chat_id=user[0],
                        photo=photo,
                        caption=text,
                        parse_mode="Markdown"
                    )
                else:
                    await callback.bot.send_message(
                        chat_id=user[0],
                        text=text,
                        parse_mode="Markdown"
                    )
                sent_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
                failed_count += 1

            current_count = sent_count + failed_count
            if current_count % 5 == 0 or current_count == total_users:
                progress = (current_count / total_users) * 100
                current_page = (current_count // USERS_PER_PAGE) + 1
                try:
                    await status_message.edit_text(
                        f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n\n"
                        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n"
                        f"üìë –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}",
                        reply_markup=keyboard.as_markup()
                    )
                except TelegramBadRequest:
                    pass

        await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏

    await status_message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üì® –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {failed_count}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_users}",
        reply_markup=admin_keyboard()
    )
    
    await state.clear()
    await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)

@router.callback_query(F.data == "cancel_newsletter")
async def cancel_newsletter(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è",
        reply_markup=admin_keyboard()
    )
    await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

@router.callback_query(F.data == "admin_menu")
async def return_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üî∞ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard()
    )
    await callback.answer()

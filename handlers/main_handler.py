from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from typing import Optional
from keyboards.main_keyboards import to_home_keyboard
from keyboards.role_keyboards import seller_keyboard, user_keyboard, admin_keyboard

from utils.database import Database
from utils.variables import ADMIN_IDS

router = Router(name='main')
db = Database()

ITEMS_PER_PAGE = 5  

class FilterStates(StatesGroup):
    waiting_for_filter = State()
    waiting_for_field_input = State()

@router.message(CommandStart())
async def start_command(message: Message):
    telegram_id = str(message.from_user.id)
    
    # try:
    #     member = await message.bot.get_chat_member(chat_id=-1002272626379, user_id=message.from_user.id)
    #     if member.status == "left" or member.status == "kicked":
    #         from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
    #         keyboard = InlineKeyboardMarkup(inline_keyboard=[
    #             [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É", url="https://t.me/+fvSWdUdtzAczZDUy")]
    #         ])
            
    #         await message.answer(
    #             "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
    #             "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è "
    #             "–Ω–∞ –Ω–∞—à—É –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É. –¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n\n"
    #             "‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
    #             "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
    #             "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
    #             "üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
    #             reply_markup=keyboard,
    #             parse_mode="HTML"
    #         )
    #         return
    #     elif member.status in ["member", "administrator", "creator"]:
    #         pass
    #     else:
    #         print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞: {member.status}")
    #         pass
            
    # except Exception as e:
    #     from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
    #     keyboard = InlineKeyboardMarkup(inline_keyboard=[
    #         [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É", url="https://t.me/+lMZWa6YQlkMyOWIy")]
    #     ])
        
    #     await message.answer(
    #         "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
    #         "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É.\n"
    #         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
    #         reply_markup=keyboard,
    #         parse_mode="HTML"
    #     )
    #     print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã: {e}")
    #     return

    user = db.get_user(telegram_id=telegram_id)
    
    if not user:
        try:
            db.add_user(telegram_id=telegram_id, username=message.from_user.username, is_seller=True)
            user = db.get_user(telegram_id=telegram_id)
            
        except Exception as e:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=to_home_keyboard()
            )
            print(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            return

    await show_main_menu(message, user)
    
    if message.from_user.id in ADMIN_IDS:
        await message.answer(
            "üåü –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞:\n"
            "- –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "- –ü—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–ª–æ–±\n"
            "- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ —É—Å–ª—É–≥",
            reply_markup=admin_keyboard()
        )

async def show_main_menu(message: Message, user, name: Optional[str] = None) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user:
        keyboard = user_keyboard()
    elif db.is_seller(telegram_id=str(user[1])):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å 1 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è telegram_id –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        keyboard = seller_keyboard()
    else:
        keyboard = user_keyboard()

    if name:
        welcome_text = f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!\n\n"
    else:
        welcome_text = f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n\n"
    
    try:
        await message.answer(welcome_text, reply_markup=keyboard)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=to_home_keyboard()
        )

@router.callback_query(F.data == "go_to_home")
async def go_to_home(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    await open_home(callback.message, callback.from_user, state, is_callback=True)
    
@router.message(F.text.in_(["–í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π üè†"]))
async def go_to_home_reply(message: Message, state: FSMContext):
    await open_home(message, message.from_user, state)
    
@router.message(F.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def go_to_home_reply(message: Message, state: FSMContext):
    await open_home(message, message.from_user, state)

async def open_home(message: Message, user, state: FSMContext, is_callback: bool = False):
    try:
        await state.clear()
        
        db_user = db.get_user(telegram_id=str(user.id))
        if not db_user:
            try:
                db.add_user(telegram_id=str(user.id), username=user.username, is_seller=True)
                db_user = db.get_user(telegram_id=str(user.id))
                if not db_user:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            except Exception as e:
                error_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start\n–ù–∏–∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã"
                if is_callback:
                    try:
                        await message.edit_text(error_text, reply_markup=to_home_keyboard())
                    except:
                        await message.answer(error_text, reply_markup=to_home_keyboard())
                else:
                    await message.answer(error_text, reply_markup=to_home_keyboard())
                return
            
        if is_callback:
            try:
                await message.edit_text(
                    f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!",
                    reply_markup=seller_keyboard() if db.is_seller(telegram_id=str(db_user[1])) else user_keyboard()
                )
            except:
                await message.answer(
                    f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!",
                    reply_markup=seller_keyboard() if db.is_seller(telegram_id=str(db_user[1])) else user_keyboard()
                )
        else:
            await show_main_menu(message, db_user, name=user.first_name)
        
        if user.id in ADMIN_IDS:
            await message.answer(
                "üåü –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞:\n"
                "- –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "- –ü—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–ª–æ–±\n"
                "- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ —É—Å–ª—É–≥",
                reply_markup=admin_keyboard()
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ go_to_home: {e}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
        if is_callback:
            try:
                await message.edit_text(error_text, reply_markup=to_home_keyboard())
            except:
                await message.answer(error_text, reply_markup=to_home_keyboard())
        else:
            await message.answer(error_text, reply_markup=to_home_keyboard())

@router.message(F.text == "/get_id")
async def get_id(message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.answer(
        f"üÜî ID —á–∞—Ç–∞: {message.chat.id}\n"
        f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}"
    )

